{"version":3,"sources":["game/Square.jsx","game/config.ts","game/Board.tsx","game/Scores.jsx","game/util.ts","game/search.ts","game/auto.ts","game/Game.tsx","App.js","serviceWorker.js","index.js"],"names":["Square","_this","Object","classCallCheck","this","_super","call","degree","Math","floor","random","squareStyle","props","available","chess_pieces","react_default","a","createElement","className","onClick","handleClick","style","transform","concat","React","Component","config","SIZE","console","log","Board","i","j","game_Square","currentState","currentAvailabeState","key","index","row","push","renderSquare","rows","generateSquares","number_of_O","number_of_X","winner","_this2","handleModeSelection","gameFinished","generateFinishPopup","initialization","generateInitialPopup","generateRows","Scores","type","n","klass","r","bottom","xNumber","x_number","oNumber","o_number","height","width","generateCoin","position","textAlign","m","X","O","head","tail","getRival","player","dirs","isInBoundary","o","searchDir","x","y","dir","currentPlayer","state","target","FCD","CD","max","Search","searchForReversiblePieces","opponent","_step","finalResult","initialTarget","friendly","_iterator","_createForOfIteratorHelper","s","done","value","reversibles","temp","splice","apply","length","toConsumableArray","err","e","f","getSecureAxis","axis","reverseDirection","searchAvailable","noMoreMove","Array","fill","availableState","slice","searchAvailableAuto","possibleMoves","pos","CaculatePoints","points","ITERATION","getScoreFromState_R","iCounter","history","isFinalState","Xs","Os","StabilityScore","getScoreFromState_S","_step3","min","Infinity","_iterator3","auto_createForOfIteratorHelper","move","atCorner","_step4","newState","cloneState","_iterator4","p","result","antIcon","ReloadOutlined","fontSize","spin","Game","single","setState","_singleMode","_gameStarted","initialBoard","initializeGameState","_currentState","_currentAvailabeState","initializeAvailabeState","_isForX","_numberO","_numberX","_gameFinished","_doubleMove","window","SA","stabilityAnalysis","document","querySelector","innerWidth","board","land","setUpForNextPlayer","tempState","positionList","Game_createForOfIteratorHelper","_this3","nextPlayer","nextPlayerMoves","currentPlayerMoves","point","Promise","resolve","reject","setTimeout","then","computerMove","doubleMovePlayer","message","info","maxScore","finalMove","_step2","_iterator2","score","pickLocation","initialState","_this4","status","theOther","Fragment","display","indicator","game_Board","game_Scores","clearBoard","href","App","game_Game","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","title","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce808f12.chunk.js","sourcesContent":["import React from 'react';\n\nclass Square extends React.Component {\n\n  constructor() {\n    super();\n    this.degree = Math.floor(Math.random()*360);\n  }\n\n  render() {\n    let available = this.props.available;\n    let squareStyle = {};\n    if (available) {\n      squareStyle = 'square available';\n    } else if (this.props.chess_pieces === 'X') {\n      squareStyle = 'square head';\n    } else if (this.props.chess_pieces === 'O') {\n      squareStyle = 'square tail';\n    } else {\n      squareStyle = 'square';\n    }\n\n    return (\n      <button\n        className={squareStyle}\n        onClick={this.props.handleClick}\n      >\n        <div className='inner' style={{transform: `rotate(${this.degree}deg)`}}></div>\n      </button>\n    );\n\n\n  }\n}\n\nexport default Square;","//{ [index: string]: string; }\nexport default {\n\tsize: 8,\n\twait: 300, // millisecond\n\titerations: 4,\n\tset2: [\n\t\t['O', null, null, null, 'X', 'X', 'X', null],\n\t\t['X', null, null, null, null, null, null, null],\n\t\t[null, null, null, null, null, null, null, null],\n\t\t[null, null, null, null, null, null, null, null],\n\t\t[null, null, null, null, null, null, null, null],\n\t\t[null, null, null, null, null, null, null, null],\n\t\t[null, null, null, null, null, null, null, null],\n\t\t[null, null, null, null, null, null, null, null],\n\t],\n\tset1: [\n\t\t['X', 'X', null, 'X', null, 'O', 'O', 'O'],\n\t\t['X', null, null, 'O', null, null, 'O', 'O'],\n\t\t['X', null, null, null, null, null, null, 'O'],\n\t\t['O', null, null, null, null, null, null, 'O'],\n\t\t['X', null, null, null, null, null, null, null],\n\t\t['X', null, null, null, null, null, null, null],\n\t\t['X', null, 'X', null, 'O', null, 'O', null],\n\t\t['O', null, 'O', null, 'X', null, 'X', null],\n\t],\n};\n\n","import React from 'react';\nimport Square from './Square';\nimport config from './config';\n\nlet SIZE = config.size;\nif (SIZE < 8) {\n\tconsole.log('minium size is 8*8');\n\tSIZE = 8;\n}else if(SIZE > 16) {\n\tconsole.log('maximum size is 16*16');\n\tSIZE = 16;\n}\nif (SIZE%2 !== 0) {\n\tconsole.log('length must be even');\n\tSIZE++;\n}\n\ntype availableState = Array<Array<boolean>>;\n\ninterface PropsType {\n  currentState: Array<Array<string | null>>,\n  currentAvailabeState: availableState, // the positions that can land a piece\n  gameFinished: boolean, // is the game over\n  initialization: boolean, // is the game in the initial stage\n  number_of_O: number, // number of pieces of O(head)\n  number_of_X: number, // number of pieces of X(tail)\n  handleClick: Function, \n  handleModeSelection: Function,\n}\n\nclass Board extends React.Component<PropsType> {\n\n  renderSquare(i: number, j: number) {\n    return (\n      <Square \n        chess_pieces={this.props.currentState[i][j]} // the peice on that location\n        available={this.props.currentAvailabeState[i][j]} // is this position available\n        handleClick={() => this.props.handleClick(i,j)} \n        key={i*100+j}\n      />\n    );\n  }   \n\n  generateSquares(index: number) {\n    let row = [];\n    for(let i=0; i<=SIZE-1; i++) {\n      row.push(this.renderSquare(index,i));\n    }\n    return row;\n  }\n\n  generateRows() {\n    let rows = [];\n    for(let i=0; i<=SIZE-1; i++) {\n      rows.push(\n        <div className=\"board-row\" key={'R'+i}>\n          {this.generateSquares(i)}\n        </div>\n      );\n    }\n    return rows;\n  }\n\n  generateFinishPopup() {\n    if (this.props.number_of_O === this.props.number_of_X) {\n      return (\n        <div className=\"mask\">\n          <div className=\"finish_popup tie\">\n            <span>Tie!</span>\n          </div>\n        </div>\n      );\n    }\n\n    const winner = this.props.number_of_O > this.props.number_of_X ? 'tail' : 'head';\n    return(\n      <div className=\"mask\">\n        <div className=\"finish_popup\">\n          <div className={winner}></div>\n          <span>{winner} is the winner!</span>\n        </div>\n      </div>\n    );\n  }\n\n  generateInitialPopup() {\n    return(\n      <div className=\"mask\">\n        <div className=\"finish_popup\">\n          <div className='selection' onClick={() => {this.props.handleModeSelection(true)}}>Single Player</div>\n          <div className='selection' onClick={() => {this.props.handleModeSelection(false)}}>Two Players</div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.props.gameFinished && this.generateFinishPopup()}\n        {this.props.initialization && this.generateInitialPopup()}\n        {this.generateRows()}\n      </div>\n    );\n  }\n}\n\nexport default Board;","import React from 'react';\n\nclass Scores extends React.Component {\n\n  generateCoin (type, n) {\n    const klass = type === 'X' ? 'head' : 'tail';\n    const r = [];\n    let bottom = 60;\n\n    while (n > 0) {\n        r.push(<div className={klass} style={{bottom: bottom + 'px'}} key={bottom}/>);\n        bottom += 10;\n        n--;\n    }\n    return r;\n  }\n\n  render() {\n    const xNumber = this.props.x_number;\n    const oNumber = this.props.o_number;\n\n    return (\n        <div className='scores'>\n            <div style={{ height: '100%', width: '50%'}}>\n                {this.generateCoin('X', xNumber)}\n                <div style={{position: 'absolute', bottom: '0px', width: '80px', textAlign: 'center'}}>{xNumber}</div>\n            </div>\n            <div style={{ height: '100%', width: '50%'}}>\n                {this.generateCoin('O', oNumber)}\n                <div style={{position: 'absolute', bottom: '0px', width: '80px', textAlign: 'center'}}>{oNumber}</div>\n            </div>\n        </div>\n    );\n\n\n  }\n}\n\nexport default Scores;","const m:{ [key: string]: string; } = {\n    'X': 'O',\n    'O': 'X',\n    'head': 'tail',\n    'tail': 'head',\n}\nexport const getRival = (player: string) => {\n    return m[player];\n}","import config from './config';\nimport { getRival } from './util';\n\ntype coor = Array<number>; \ntype move = {pos: coor, reversibles: Array<coor>};\ntype gameState = Array<Array<string | null>>;\ntype availableState = Array<Array<boolean>>;\n\nlet SIZE = config.size;\nif (SIZE < 8) {\n  console.log('min size is 8*8');\n  SIZE = 8;\n} else if (SIZE > 16) {\n  console.log('max size is 16*16');\n  SIZE = 16;\n}\nif (SIZE % 2 !== 0) {\n  console.log('size must be an even number');\n  SIZE = 8;\n}\n\nconst dirs = [[0, 1], [1, 0], [1, 1], [1, -1], [-1, 1], [-1, -1], [-1, 0], [0, -1]];\n\n\n/*\n  * Check if a certain position is inside the board(is valid).\n  */\nexport const isInBoundary = (o: Array<number>) => {\n\tif (o[0] < 0 || o[0] >= SIZE) return false;\n\tif (o[1] < 0 || o[1] >= SIZE) return false;\n\treturn true;\n};\n\nconst searchDir = (x: number, y: number, dir: coor, currentPlayer: string, state: gameState): number => {\n  let target:coor = [x + dir[0], y + dir[1]];\n  let FCD: number = 2; // Friendly Complete Direction    OOOOO|\n  let CD: number = 1; // Complete Direction    OOXOX|\n\n  while (isInBoundary(target)) {\n    if (state[target[0]][target[1]] === null) {\n      FCD = 0;\n      CD = 0;\n      break;\n    } else if (state[target[0]][target[1]] === currentPlayer) {\n      //\n    } else {\n      FCD = 0;\n    }\n    target[0] += dir[0];\n    target[1] += dir[1];\n  }\n  return Math.max(FCD, CD);\n};\n\nvar Search = {\n  \n  /*\n  * Given a certain position, opponent and current state, calculate how many pieces can be reversed \n  * by this move.\n  */\n  searchForReversiblePieces: (x: number, y: number, opponent: string, currentState: Array<Array<string|null>>): Array<coor> => {\n    const finalResult: Array<coor> = [];\n    const initialTarget = [x, y];\n    const friendly = getRival(opponent);\n  \n    for (let dir of dirs) {\n      const target = [...initialTarget];\n      const reversibles: Array<coor> = [];\n      const temp = [];\n      target[0] += dir[0];\n      target[1] += dir[1];\n  \n      while (isInBoundary(target)) {\n        if (currentState[target[0]][target[1]] === null) {\n          break;\n        } else if (currentState[target[0]][target[1]] === friendly) {\n          reversibles.splice(reversibles.length, 0, ...temp);\n          break;\n        } else {\n          // encounter a opponent's piece. It is potential verersiable piece.\n          temp.push([...target]);\n        }\n        target[0] += dir[0];\n        target[1] += dir[1];\n      }\n  \n      finalResult.splice(finalResult.length, 0, ...reversibles);\n    }\n    return finalResult;\n  },\n\n  getSecureAxis: function (x:number, y:number, currentPlayer: string, state: gameState): number {\n    if(state[x][y] != currentPlayer) return 0;\n    let axis = 0;\n    for (let i = 0; i < dirs.length/2; i++) {\n      let mainDirection = dirs[i];\n      let reverseDirection = dirs[dirs.length - i - 1];\n      let value: number = searchDir(x, y, mainDirection, currentPlayer, state) + searchDir(x, y, reverseDirection, currentPlayer, state);\n      if (value >= 2) axis++;\n    }\n\n    return axis;\n  },\n\n  /*\n  * Search all positions, find out the ones you can make your next move. \n  * Return the available positions as a 2D array.\n  */\n\tsearchAvailable: function(opponent: string, currentState: gameState) {\n\n\t\tlet noMoreMove = true;\n\n\t\tlet temp = Array(SIZE).fill(null);\n    let availableState = [];\n    for (let i=0; i<=SIZE-1; i++){\n      availableState[i] = temp.slice(0);\n    }\n\n\t\tfor (let i = SIZE - 1; i >= 0; i--) {\n\t\t\tfor (let j = SIZE - 1; j >= 0; j--) {\n\n        if (currentState[i][j] !== null) continue;\n\n        let result = this.searchForReversiblePieces(i, j, opponent, currentState);\n\n        if (result.length > 0) {\n          availableState[i][j] = true;\n\t\t\t\t\tnoMoreMove = false;\n        }\n\t\t\t};\n\t\t};\n\n\t\treturn {\n\t\t\tavailableState: availableState,\n\t\t\tnoMoreMove: noMoreMove\n\t\t};\n  },\n  \n\n  /*\n  * Search all positions, find out the ones you can make your next move. \n  * Return all the available moves in a list\n  */\n  searchAvailableAuto: function(currentPlayer: string, state: gameState): Array<move> {\n    const possibleMoves: Array<move> = [];\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (state[i][j] !== null) continue;\n        let reversibles = Search.searchForReversiblePieces(i, j, getRival(currentPlayer), state);\n        if (reversibles.length > 0) {\n          possibleMoves.push({pos: [i, j], reversibles: reversibles});\n        }\n      }\n    }\n    return possibleMoves;\n  },\n\n\tCaculatePoints:function(currentState: Array<Array<string|null>>){\n\t\tlet points = {\n\t\t\tX: 0,\n\t\t\tO: 0\n\t\t};\n\n\t\tfor (let i = SIZE - 1; i >= 0; i--) {\n\t\t\tfor (let j = SIZE - 1; j >= 0; j--) {\n\t\t\t\tif(currentState[i][j]==='X'){ points.X++; }\n\t\t\t\tif(currentState[i][j]==='O'){ points.O++; }\n\t\t\t};\n\t\t};\n\n\t\treturn points;\n\t}, \n};\n\nexport default Search; ","import config from './config';\nimport { getRival } from './util';\nimport Search from './search';\n\ntype coor = Array<number>;\ntype move = {pos: coor, reversibles: Array<coor>};\ntype gameState = Array<Array<string | null>>;\ntype record = {type: string, value: number};\n\n\nlet SIZE = config.size;\nif (SIZE < 8) {\n  console.log('min size is 8*8');\n  SIZE = 8;\n} else if (SIZE > 16) {\n  console.log('max size is 16*16');\n  SIZE = 16;\n}\nif (SIZE % 2 !== 0) {\n  console.log('size must be an even number');\n  SIZE = 8;\n}\n\nlet ITERATION = config.iterations; \n\n/*\n * Given a state and an opponent, choice a best move.\n * We assume that there is at least one possible move.\n*/\nexport const pickLocation = (opponent: string, state: gameState): coor => {\n\n  let maxScore: number = -Infinity;\n  let finalMove: coor = [0, 0];\n  let currentPlayer: string = getRival(opponent);\n\n  const possibleMoves: Array<move> = Search.searchAvailableAuto(currentPlayer, state);\n\n  if (possibleMoves.length === 1) {\n    // only one choice, no need to maxmin tree.\n    return possibleMoves[0].pos;\n  } else {\n    for (let move of possibleMoves) {\n      // console.log(move.pos)\n      let x = move.pos[0];\n      let y = move.pos[1];\n\n      // If there is corner to grab, grab it.\n      if (atCorner(x, y)) {\n        finalMove = [x, y];\n        break;\n      }\n      // generate new state\n      const newState: gameState = cloneState(state);\n      for (let p of move.reversibles) {\n        newState[p[0]][p[1]] = currentPlayer;\n      }\n      newState[x][y] = currentPlayer;\n      // use recurive function to calculate score\n      let score = getScoreFromState_R(newState, opponent, ITERATION, {type: 'X', value: maxScore});\n      // console.log(score)\n      if (score > maxScore) {\n        maxScore = score;\n        finalMove = [x, y];\n      }\n    }\n  }\n  // console.log('final move: ' + finalMove)\n  // console.log('------------------')\n  return finalMove;\n}\n\n/*\n* Calculate the score from current state\n* The stability of every piece is considered \n* This is a static analysis, so no future decision is involved\n*/ \nconst getScoreFromState_S = (state: gameState): number => {\n  let Xs = 0;\n  let Os = 0;\n  let StabilityScore = 0;\n\n  for (let i = 0; i < SIZE; i++) {\n    for (let j = 0; j < SIZE; j++) {\n      if (state[i][j] === 'X') Xs++;\n      if (state[i][j] === 'O') Os++;\n      StabilityScore += Search.getSecureAxis(i, j, 'X', state);\n    }\n  }\n  return Xs - Os + StabilityScore/2;\n}\n\n/*\n* Calculate the stability of every piece \n* This is a test tool(called only from console)\n*/ \nexport const stabilityAnalysis = (state: gameState) => {\n  const result = [];\n  for (let i = 0; i < SIZE; i++) {\n    result.push(new Array(SIZE).fill(0));\n  }\n  for (let i = 0; i < SIZE; i++) {\n    for (let j = 0; j < SIZE; j++) {\n      result[i][j] = Search.getSecureAxis(i, j, 'O', state);\n    }\n  }\n  return result;\n}\n\n/*\n* Calculate the score from current state\n* This is a recursive analysis, so future decision is involved\n* iCounter is iterator counter. If iCounter is 0, run static analysis\n* otherwise, analysis the score recursively with mini-max algorithm.\n*/ \nconst getScoreFromState_R = (state: gameState, currentPlayer: string, iCounter: number, history: record): any => {\n  // console.log('getScoreFromState_R')\n  // console.log(state, currentPlayer, iCounter);\n  if (iCounter === 0 || isFinalState(state)) {\n    return getScoreFromState_S(state);\n  }\n  // find all possible moves and their reversiable\n  const possibleMoves = Search.searchAvailableAuto(currentPlayer, state);\n\n\n  if (possibleMoves.length === 0) {\n    // no available move at current state. \n    // This means the rival can move again.\n    return getScoreFromState_R(state, getRival(currentPlayer), iCounter-1, history);\n  } else {\n    // general case. If we reach here, we must got at least one possible move.\n    // Choose the one that can bring the maximum benefit(it depends on the identity of current player)\n    let min = Infinity;\n    let max = -Infinity;\n    for (let move of possibleMoves) {\n\n      // corner grab, special case\n      if (atCorner(move.pos[0], move.pos[1])) {\n        if (currentPlayer === 'X') {\n          return 999;\n        } else {\n          return -999;\n        }\n      }\n\n      // alpha-beta pruning\n      if (currentPlayer === 'X' && history.type === 'O') {\n        if (max >= history.value) break;\n      } else if (currentPlayer === 'O' && history.type === 'X') {\n        if (min <= history.value) break;\n      } \n\n      // generate new state\n      const newState: gameState = cloneState(state);\n      for (let p of move.reversibles) {\n        newState[p[0]][p[1]] = currentPlayer;\n      }\n      newState[move.pos[0]][move.pos[1]] = currentPlayer;\n\n      // calculate score of a new state(calculate the value of a child node)\n      let value = getScoreFromState_R(newState, \n                                      getRival(currentPlayer), \n                                      iCounter-1, \n                                      {type: currentPlayer, value: currentPlayer === 'X'? max : min});\n\n      if (currentPlayer === 'X') {\n        // max node\n        max = Math.max(max, value);\n      } else {\n        // min node\n        min = Math.min(min, value);\n      }\n    }\n\n    if (currentPlayer === 'X') {\n      return max;\n    } else {\n      return min;\n    }\n  }\n}\n\nconst cloneState = (state: gameState) => {\n\n  const result = new Array(SIZE);\n  for (let i = 0; i < SIZE; i++) {\n    result[i] = new Array(SIZE).fill(null);\n  }\n\n  for (let i = SIZE - 1; i >= 0; i--) {\n    for (let j = SIZE - 1; j >= 0; j--) {\n      result[i][j] = state[i][j];\n    }\n  }\n\n  return result;\n}\n\nconst atCorner = (x: number, y: number): boolean => {\n  if (x === 0 && y === 0) return true;\n  if (x === 0 && y === SIZE-1) return true;\n  if (x === SIZE-1 && y === 0) return true;\n  if (x === SIZE-1 && y === SIZE-1) return true;\n  return false;\n}\n\nconst atEdge = (x: number, y: number): boolean => {\n  if (x === 0) return true;\n  if (x === SIZE-1) return true;\n  if (y === 0) return true;\n  if (y === SIZE-1) return true;\n  return false;\n}\n\nexport const isFinalState = (state: gameState): boolean => {\n\n  let Xs = 0;\n  let Os = 0;\n\n  for (let i = 0; i < SIZE; i++) {\n    for (let j = 0; j < SIZE; j++) {\n      if (state[i][j] === 'X') Xs++;\n      if (state[i][j] === 'O') Os++;\n    }\n  }\n\n  return (Xs + Os) === SIZE * SIZE;\n}\n","import React from 'react';\nimport './style/game.scss';\nimport Board from './Board';\nimport Scores from './Scores.jsx';\nimport Search from './search';\nimport config from './config';\nimport { pickLocation, isFinalState, stabilityAnalysis } from './auto';\nimport { getRival } from './util';\nimport { message, Spin } from 'antd';\nimport { ReloadOutlined } from '@ant-design/icons';\n\nconst antIcon = <ReloadOutlined style={{ fontSize: 24 }} spin />;\n\n\ntype gameState = Array<Array<string | null>>;\ntype coor = Array<number>; \ntype availableState = Array<Array<boolean>>;\ninterface IProps {}\n\ninterface IState {\n  _currentState: gameState,\n  _gameStarted: boolean,\n  _singleMode: boolean,\n  _currentAvailabeState: availableState, // available locations\n  _isForX: boolean, // is current player X? \n  _numberO: number, // the number of Os\n  _numberX: number, // the number of Xs\n  _gameFinished: boolean,\n  _doubleMove: boolean,\n}\n\nlet SIZE = config.size;\nif (SIZE < 8) {\n\tconsole.log('minium size is 8*8');\n\tSIZE = 8;\n}else if(SIZE > 16) {\n\tconsole.log('maximum size is 16*16');\n\tSIZE = 16;\n}\nif (SIZE%2 !== 0) {\n\tconsole.log('length must be even');\n\tSIZE++;\n}\n\nclass Game extends React.Component<IProps, IState> {\n\n  constructor(props: any) {\n    super(props);\n    const initialBoard = this.initializeGameState();\n    // const initialBoard = this.initializeGameState_special();\n    this.state = {\n      _gameStarted: false,\n      _singleMode: true,\n      _currentState: initialBoard, // current location\n      _currentAvailabeState: this.initializeAvailabeState(initialBoard), // available locations\n      _isForX: false, // is current piece a X? \n      _numberO: 2, // the number of Os\n      _numberX: 2, // the number of Xs\n      _gameFinished: false,\n      _doubleMove: false\n    };\n  }\n\n  componentDidMount() {\n    (window as any).SA = () => {\n      let result = stabilityAnalysis(this.state._currentState);\n      console.log(result);\n    }\n    let board = document.querySelector('.board');\n    (board as any).style.fontSize = (window.innerWidth/10) + 'px';\n  }\n\n   // setup the initial pieces on the board\n  initializeGameState(): gameState {\n  \tlet temp = Array(SIZE).fill(null);\n  \tlet board = [];\n  \tfor (let i=0; i<=SIZE-1; i++){\n  \t\tboard[i] = temp.slice(0);\n  \t}\n  \t// initialize 4 pieces (X is head, O is tail)\n    board[SIZE/2 - 1][SIZE/2 - 1] = 'X';\n    board[SIZE/2 - 1][SIZE/2] = 'O';\n    board[SIZE/2][SIZE/2 - 1] = 'O';\n    board[SIZE/2][SIZE/2] = 'X'; \n    return board;\n  }\n\n  initializeGameState_special() {\n    return config.set1;\n  }\n\n  // calculate all the possible available positions \n  initializeAvailabeState(initialBoard: gameState) {\n    let temp = Array(SIZE).fill(null);\n  \tlet board = [];\n  \tfor (let i=0; i<=SIZE-1; i++){\n  \t\tboard[i] = temp.slice(0);\n  \t}\n    const { availableState } = Search.searchAvailable('X', initialBoard);\n    return availableState;\n  }\n\n  handleModeSelection = (single: boolean) => {\n    this.setState({\n      _singleMode: single,\n      _gameStarted: true,\n    });\n  }\n\n  // click event handler\n  handleClick(x: number, y: number) {\n    // check if the user clicled a valid position\n    if (this.state._currentState[x][y] === 'O' || this.state._currentState[x][y] === 'X'){\n      // cannot place a piece on another one\n      console.log('occupied!');\n      return false;\n    } else if(this.state._gameFinished){\n      // cannot place a piece outside available zone\n      console.log('game is over!');\n      return false;\n    } else if(this.state._isForX && this.state._singleMode) {\n      // in single mode, human player is (O)tail\n      console.log('not your turn!');\n      return false;\n    } else if(!this.state._currentAvailabeState[x][y]){\n      // no piece shall be reversed after this move\n      // then it is invalid move\n      console.log('invalid move!');\n      return false;\n    }\n\n    const newState = this.land(x, y);\n    this.setUpForNextPlayer(newState);\n  }\n\n  land(x: number, y: number): gameState {\n    let currentPlayer = this.state._isForX? 'X' : 'O';\n    let opponent = getRival(currentPlayer);\n    let tempState = this.state._currentState;\n\n    // We assume that there is at least one possible move.\n    // Otherwise, this method won't be called\n    let positionList: Array<coor> = Search.searchForReversiblePieces(x, y, opponent, this.state._currentState);\n    \n    // add a new piece to the board and reverse opponent's pieces\n    tempState[x][y] = currentPlayer;\n    for (let pos of positionList) {\n      tempState[pos[0]][pos[1]] = currentPlayer;\n    }\n    this.setState({\n      _currentState: tempState,\n    });\n    return tempState;\n  }\n\n  setUpForNextPlayer(newState: gameState) {\n    const currentPlayer = this.state._isForX? 'X' : 'O';\n    const nextPlayer = getRival(currentPlayer);\n    const nextPlayerMoves = Search.searchAvailable(currentPlayer, newState);\n    const currentPlayerMoves = Search.searchAvailable(nextPlayer, newState);\n    const point = Search.CaculatePoints(newState);\n\n    if (nextPlayerMoves.noMoreMove && currentPlayerMoves.noMoreMove) {\n      // No one can make further move, game over.\n      this.setState({\n        _gameFinished: true,\n        _numberO: point.O,\n        _numberX: point.X,\n      });\n    } else if (isFinalState(newState)) {\n      // No space for further move, game over.\n      this.setState({\n        _gameFinished: true,\n        _numberO: point.O,\n        _numberX: point.X,\n      });\n    } else if (nextPlayerMoves.noMoreMove) {\n      // next player cannot move, current player shall move again\n      this.setState({\n        _currentAvailabeState: currentPlayerMoves.availableState,\n        _numberO: point.O,\n        _numberX: point.X,\n        _doubleMove: true,\n      });\n\n      if (this.state._singleMode && currentPlayer === 'X') {\n        const p = new Promise((resolve, reject) => {\n          setTimeout(() => resolve(), config.wait);\n        });\n        p.then(()=>{\n          this.computerMove(newState);\n        });\n      }\n\n      const doubleMovePlayer = this.state._isForX? \"head\" : \"tail\";\n      message.info(doubleMovePlayer + ' player combo!', 2);\n    } else {\n      // general cases, toggle players\n      this.setState({\n        _currentAvailabeState: nextPlayerMoves.availableState,\n        _isForX: nextPlayer === 'X', \n        _numberO: point.O,\n        _numberX: point.X,\n        _doubleMove: false\n      })\n\n      if (this.state._singleMode && nextPlayer === 'X') {\n        const p = new Promise((resolve, reject) => {\n          setTimeout(() => resolve(), config.wait);\n        });\n        p.then(()=>{\n          this.computerMove(newState);\n        });\n      }\n    }\n  }\n\n  computerMove(state: gameState) {\n    const pos = pickLocation('O', state);\n    const newState = this.land(pos[0], pos[1]);\n    this.setUpForNextPlayer(newState);\n  }\n\n  clearBoard(){\n    let initialState = this.initializeGameState();\n    this.setState({\n      _gameStarted: false,\n      _singleMode: true,\n      _currentState: initialState,\n      _currentAvailabeState: this.initializeAvailabeState(initialState),\n      _isForX: false,\n      _numberO: 2,\n      _numberX: 2,\n      _gameFinished: false,\n      _doubleMove: false,\n    });\n  }\n\n  render() {\n    let nextPlayer = \"\";\n    let status = \"\";\n\n    if (this.state._gameFinished){\n      if (this.state._numberO > this.state._numberX){\n        status = \"Winner is tail!\";\n      } else if ( this.state._numberO < this.state._numberX ){\n        status = \"Winner is head!\";\n      } else {\n        status = \"Another round?\";\n      }\n    } else if (this.state._doubleMove) {\n      const doubleMovePlayer = this.state._isForX? \"head\" : \"tail\";\n      const theOther = this.state._isForX? \"tail\" : \"head\";\n      status = `${theOther} has no valid moves, so ${doubleMovePlayer} moves again.`;\n    } else{\n      nextPlayer = this.state._isForX? \"head\" : \"tail\";\n      status = \"Current player: \" + nextPlayer;\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <div className=\"status white_font\" style={{display: 'inline-block'}}>\n              {status}\n            </div>\n            <span className={this.state._isForX? 'coin_icon head' : 'coin_icon tail'}></span>\n            {!this.state._gameFinished && this.state._singleMode && this.state._isForX && <Spin indicator={antIcon} />}\n            <Board \n              initialization = {!this.state._gameStarted}\n              currentState={this.state._currentState} \n              currentAvailabeState={this.state._currentAvailabeState}\n              gameFinished = {this.state._gameFinished}  \n              number_of_O = {this.state._numberO}\n              number_of_X = {this.state._numberX}   \n              handleClick={(i: number, j: number) => this.handleClick(i,j)}\n              handleModeSelection={this.handleModeSelection} \n            />\n            <Scores x_number={this.state._numberX} o_number={this.state._numberO} />\n          </div>\n          <button className='clear' onClick={() => this.clearBoard()}>RESET</button>\n        </div>\n        <div className=\"white_font mobile-status\" >\n          H {this.state._numberX} : {this.state._numberO} T\n        </div>\n        <div className=\"status white_font\" >\n          <ul className=\"game-info\">\n            <li>Players take turns placing pieces on the board. \n              After a move, any pieces of the opponent's color that are in the middle of newly placed piece and \n              other current player's pieces will be turned to current player's piece.</li>\n            <li>If a move cannot reverse opponent's pieces, then it is invalid. The green zone on the \n              board shows all the valid moves current player can perform</li>\n            <li>Players take alternate turns. If one player can not make a valid move, play passes back to the other player. \n              When neither player can move, the game ends. This occurs when the grid has filled up or when neither player can \n              legally place a piece in any of the remaining squares.</li>\n            <li>The object of the game is to have the majority of disks turned to display your color when the \n              last playable empty square is filled.</li>\n            <li>If you play alone, you play as tail and you move first, computer play as head.</li>\n            <li>Check <a href=\"https://en.wikipedia.org/wiki/Reversi\">here</a> for additional information</li>\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Game; ","import React, { Component } from 'react';\nimport Game from './game/Game.tsx';\nimport './style.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='main'>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\ndocument.title = \"Reversi\";\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}